# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LmXeqEUKIfIQIIcEaRAZs9by9_3zGQ-A
"""

import pandas as pd
import yfinance as yf
import datetime
import matplotlib.pyplot as plt

# Define the ticker symbol and the time frame
ticker_symbol = "TSLA"
start_date = datetime.datetime.now() - datetime.timedelta(days=3*365)
end_date = datetime.datetime.now()

# Download the data from Yahoo Finance
tesla_data = yf.download(ticker_symbol, start=start_date, end=end_date)

# Display the first few rows of the data
print(tesla_data.head())

# Basic summary statistics
print(tesla_data.describe())

# Check for missing values
print(tesla_data.isnull().sum())

# Plotting the closing prices
plt.figure(figsize=(10, 6))
plt.plot(tesla_data['Close'], label='Closing Price')
plt.title('Tesla Stock Closing Prices Over Last 3 Years')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.show()


# Market Indicator
sp500_data = yf.download('^GSPC', start=start_date, end=end_date)

combined_data = pd.DataFrame({'TSLA_Close': tesla_data['Close'], 'SP500_Close': sp500_data['Close']})
correlation = combined_data.corr()
print(correlation)

tesla_data['Previous_Close'] = tesla_data['Close'].shift(1)
tesla_data = tesla_data.dropna()
X = tesla_data[['Previous_Close']]
y = tesla_data['Close']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.scatter(combined_data['TSLA_Close'], combined_data['SP500_Close'])
plt.title('Correlation between Tesla and S&P 500 Closing Prices')
plt.xlabel('Tesla Closing Price')
plt.ylabel('S&P 500 Closing Price')
plt.show()

plt.figure(figsize=(14, 7))

# Plot actual prices as points
plt.scatter(y_test.index, y_test, label='Actual Prices', color='blue', alpha=0.5, s=10)

# Plot predicted prices as points
plt.scatter(y_test.index, y_pred, label='Predicted Prices', color='red', alpha=0.5, s=10)

plt.title('Actual vs Predicted Tesla Stock Prices')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.tight_layout()  # Adjust layout to fit all labels, titles, etc.
plt.show()

import numpy as np

# Hypothetical RMSE values for 3 different models
rmse_values = np.array([1.0, 1.5, 2.0])

# Calculate inverted weights (lower RMSE gets higher weight)
weights = 1 / rmse_values

# Normalize the weights so they sum to 1
normalized_weights = weights / np.sum(weights)

print(normalized_weights)

# Assume these are the predictions from your models for the SPY500 impact on Tesla
model1_predictions = ... # Model 1 predictions for Tesla based on SPY500
model2_predictions = ... # Model 2 predictions for Tesla based on SPY500
model3_predictions = ... # Model 3 predictions for Tesla based on SPY500

# Normalized weights calculated earlier
weights = np.array([0.46153846, 0.30769231, 0.23076923])

# Calculate the weighted ensemble predictions
ensemble_predictions = (weights[0] * model1_predictions +
                        weights[1] * model2_predictions +
                        weights[2] * model3_predictions)

# Now you have the ensemble predictions, which you can compare to the actual Tesla stock prices
actual_prices = ... # Actual observed Tesla stock prices

# Calculate RMSE for the ensemble predictions to evaluate performance
ensemble_rmse = np.sqrt(mean_squared_error(actual_prices, ensemble_predictions))
print("Ensemble RMSE:", ensemble_rmse)

import pandas as pd
import statsmodels.api as sm
import yfinance as yf
import pandas as pd

# Define the tickers
tesla_ticker = 'TSLA'
sp500_ticker = '^GSPC'  # S&P 500
nasdaq_ticker = '^IXIC'  # NASDAQ Composite
dowjones_ticker = '^DJI'  # Dow Jones Industrial Average

# Define the time period
start_date = '2020-01-01'
end_date = '2023-01-01'

# Download the data from Yahoo Finance
tesla_data = yf.download(tesla_ticker, start=start_date, end=end_date)['Close'].rename('Tesla_Stock_Price')
sp500_data = yf.download(sp500_ticker, start=start_date, end=end_date)['Close'].rename('SP500_Index')
nasdaq_data = yf.download(nasdaq_ticker, start=start_date, end=end_date)['Close'].rename('NASDAQ_Index')
dowjones_data = yf.download(dowjones_ticker, start=start_date, end=end_date)['Close'].rename('DowJones_Index')

# Combine all data into a single DataFrame
data = pd.concat([tesla_data, sp500_data, nasdaq_data, dowjones_data], axis=1)

# Save the data to a CSV file
data.to_csv('stock_data.csv')

# Display the first few rows of the data
data.head()

y = data['Tesla_Stock_Price']
X = data[['SP500_Index', 'NASDAQ_Index', 'DowJones_Index']]

X = sm.add_constant(X)  # Adds a constant term to the predictor
model = sm.OLS(y, X).fit()

coefficients = model.params
print(coefficients)

# Print the model summary
model_summary = model.summary()
print(model_summary)

from sklearn.linear_model import Lasso, Ridge
from sklearn.model_selection import train_test_split

# Prepare the data
y = data['Tesla_Stock_Price']
X = data[['SP500_Index', 'NASDAQ_Index', 'DowJones_Index']]

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Apply Lasso Regression
lasso = Lasso(alpha=0.1)
lasso.fit(X_train, y_train)

# Coefficients from Lasso Regression
lasso_coefficients = lasso.coef_
print("Lasso coefficients:", lasso_coefficients)

# Apply Ridge Regression
ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)

# Coefficients from Ridge Regression
ridge_coefficients = ridge.coef_
print("Ridge coefficients:", ridge_coefficients)

from sklearn.metrics import mean_squared_error
import numpy as np

lasso_predictions = lasso.predict(X_test)
rmse_lasso = np.sqrt(mean_squared_error(y_test, lasso_predictions))
print("RMSE for Lasso Regression:", rmse_lasso)

ridge_predictions = ridge.predict(X_test)
rmse_ridge = np.sqrt(mean_squared_error(y_test, ridge_predictions))
print("RMSE for Ridge Regression:", rmse_ridge)



import yfinance as yf
import pandas as pd

# Define the tickers for economic indicators (example tickers, replace with actual ones)
interest_rates_ticker = 'IR'  # Placeholder for interest rates
inflation_rates_ticker = 'INFL'  # Placeholder for inflation rates
gdp_growth_ticker = 'GDP'  # Placeholder for GDP growth rates
consumer_confidence_ticker = 'CCI'  # Placeholder for consumer confidence index

# Define the time period
start_date = '2020-01-01'
end_date = '2023-01-01'

# Download the data from Yahoo Finance (replace tickers with actual tickers from Investing.com)
interest_rates_data = yf.download(interest_rates_ticker, start=start_date, end=end_date)['Close'].rename('Interest_Rates')
inflation_rates_data = yf.download(inflation_rates_ticker, start=start_date, end=end_date)['Close'].rename('Inflation_Rates')
gdp_growth_data = yf.download(gdp_growth_ticker, start=start_date, end=end_date)['Close'].rename('GDP_Growth_Rates')
consumer_confidence_data = yf.download(consumer_confidence_ticker, start=start_date, end=end_date)['Close'].rename('Consumer_Confidence_Index')

# Combine all data into a single DataFrame
economic_data = pd.concat([interest_rates_data, inflation_rates_data, gdp_growth_data, consumer_confidence_data], axis=1)

# Display the first few rows of the data
economic_data.head()

import pandas as pd
import statsmodels.api as sm
import yfinance as yf
from sklearn.linear_model import Lasso, Ridge
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np

# Define the tickers
tesla_ticker = 'TSLA'
sp500_ticker = '^GSPC'  # S&P 500
nasdaq_ticker = '^IXIC'  # NASDAQ Composite
dowjones_ticker = '^DJI'  # Dow Jones Industrial Average

# Define the time period
start_date = '2020-01-01'
end_date = '2023-01-01'

import pandas as pd
import numpy as np
from datetime import datetime

# GDP Growth Data (Quarterly)
gdp_growth_data = [-4.6, -29.9, 35.3, 3.9, 6.3, 7.0, 2.7, 7.0, -1.6, -0.6, 3.2, 2.6, 2.2, 2.1, 4.9]
gdp_growth_dates = pd.date_range(start="2020-01-01", periods=len(gdp_growth_data), freq='Q')
gdp_growth_df = pd.DataFrame(data=gdp_growth_data, index=gdp_growth_dates, columns=["GDP Growth"])

# Consumer Confidence Level (Monthly)
consumer_confidence_data = [
    101.59, 101.17, 100.19, 99.12, 98.63, 98.58, 98.6, 98.8, 99.11, 99.25, 99.21, 99.21,
    99.22, 99.36, 99.72, 99.96, 99.9, 99.69, 99.23, 98.67, 98.38, 98.2, 98.04, 97.94,
    97.71, 97.41, 97.17, 97.01, 96.61, 96.21, 96.18, 96.44, 96.66, 96.77, 96.84, 97.05,
    97.35, 97.46, 97.35, 97.26, 97.26, 97.56, 97.92, 98, 97.83, 97.5, 97.13
]
consumer_confidence_dates = pd.date_range(start="2020-01-01", periods=len(consumer_confidence_data), freq='M')
consumer_confidence_df = pd.DataFrame(data=consumer_confidence_data, index=consumer_confidence_dates, columns=["Consumer Confidence"])

# Inflation Rate (Monthly)
inflation_rate_data = [
    2.5, 2.3, 1.5, 0.3, 0.1, 0.6, 1.0, 1.3, 1.4, 1.2, 1.2, 1.4, 1.4, 1.7, 2.6, 4.2, 5, 5.4, 5.4, 5.3, 5.4, 6.2, 6.8, 7,
    7.5, 7.9, 8.5, 8.3, 8.6, 9.1, 8.5, 8.3, 8.2, 7.7, 7.1, 6.5, 6.4, 6, 5, 4.9, 4, 3, 3.2, 3.7, 3.7, 3.2, 3.1
]
inflation_rate_dates = pd.date_range(start="2020-01-01", periods=len(inflation_rate_data), freq='M')
inflation_rate_df = pd.DataFrame(data=inflation_rate_data, index=inflation_rate_dates, columns=["Inflation Rate"])

# Interest Rate Data (Monthly)
interest_rate_data = [
    1.55, 1.58, 0.65, 0.05, 0.05, 0.08, 0.09, 0.10, 0.09, 0.09, 0.09, 0.09,
    0.09, 0.08, 0.07, 0.07, 0.06, 0.08, 0.10, 0.09, 0.08, 0.08, 0.08, 0.08,
    0.08, 0.08, 0.20, 0.33, 0.77, 1.21, 1.68, 2.33, 2.56, 3.08, 3.78, 4.10,
    4.33, 4.57, 4.65, 4.83, 5.06, 5.08, 5.12, 5.33, 5.33, 5.33, 5.33
]
interest_rate_dates = pd.date_range(start="2020-01-01", periods=len(interest_rate_data), freq='M')
interest_rate_df = pd.DataFrame(data=interest_rate_data, index=interest_rate_dates, columns=["Interest Rate"])

# Merging all data into a single DataFrame
combined_df = pd.concat([gdp_growth_df.asfreq('M', method='ffill'),
                         consumer_confidence_df, inflation_rate_df, interest_rate_df], axis=1)

combined_df.head()  # Displaying the first few rows of the combined DataFrame

# Download the data from Yahoo Finance
tesla_data = yf.download(tesla_ticker, start=start_date, end=end_date)['Close'].rename('Tesla_Stock_Price')
sp500_data = yf.download(sp500_ticker, start=start_date, end=end_date)['Close'].rename('SP500_Index')
nasdaq_data = yf.download(nasdaq_ticker, start=start_date, end=end_date)['Close'].rename('NASDAQ_Index')
dowjones_data = yf.download(dowjones_ticker, start=start_date, end=end_date)['Close'].rename('DowJones_Index')

# Combine stock market data into a single DataFrame
stock_data = pd.concat([tesla_data, sp500_data, nasdaq_data, dowjones_data], axis=1)

# Insert your economic indicators data here (assuming it's named 'economic_data')
# Make sure 'economic_data' is indexed by date
# For this example, I'll use the 'combined_df' from the previous step
economic_data = combined_df

# Merge the stock market data with the economic indicators
full_data = pd.concat([stock_data, economic_data], axis=1).dropna()

# Save the combined data to a CSV file
full_data.to_csv('combined_stock_economic_data.csv')

# Display the first few rows of the combined data
print(full_data.head())

# Prepare the data for regression analysis
y = full_data['Tesla_Stock_Price']
X = full_data[['SP500_Index', 'NASDAQ_Index', 'DowJones_Index', 'GDP Growth', 'Consumer Confidence', 'Inflation Rate', 'Interest Rate']]

# Add a constant to the predictor variable set
X = sm.add_constant(X)

# Fit the OLS model
model = sm.OLS(y, X).fit()
print(model.summary())

# Splitting the data into training and testing sets for Lasso and Ridge regression
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Apply Lasso Regression
lasso = Lasso(alpha=0.1)
lasso.fit(X_train, y_train)
lasso_coefficients = lasso.coef_
print("Lasso coefficients:", lasso_coefficients)

# Apply Ridge Regression
ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)
ridge_coefficients = ridge.coef_
print("Ridge coefficients:", ridge_coefficients)

# Calculate RMSE for Lasso and Ridge Regression
lasso_predictions = lasso.predict(X_test)
rmse_lasso = np.sqrt(mean_squared_error(y_test, lasso_predictions))
print("RMSE for Lasso Regression:", rmse_lasso)

ridge_predictions = ridge.predict(X_test)
rmse_ridge = np.sqrt(mean_squared_error(y_test, ridge_predictions))
print("RMSE for Ridge Regression:", rmse_ridge)

import pandas as pd
import statsmodels.api as sm
import yfinance as yf

# Define the ticker and time period
tesla_ticker = 'TSLA'
start_date = '2020-01-01'
end_date = '2023-01-01'

# Economic Indicators Data
# (Assuming you already have these DataFrames: gdp_growth_df, consumer_confidence_df, inflation_rate_df, interest_rate_df)

# Download Tesla stock data
tesla_data = yf.download(tesla_ticker, start=start_date, end=end_date)['Close'].rename('Tesla_Stock_Price')

# Combine economic indicators into a single DataFrame
economic_data = pd.concat([gdp_growth_df.asfreq('M', method='ffill'),
                           consumer_confidence_df, inflation_rate_df, interest_rate_df], axis=1)

# Merge Tesla stock data with economic indicators
full_data = pd.concat([tesla_data, economic_data], axis=1).dropna()

# Regression Analysis
y = full_data['Tesla_Stock_Price']
X = full_data[['GDP Growth', 'Consumer Confidence', 'Inflation Rate', 'Interest Rate']]
X = sm.add_constant(X)  # Adds a constant term to the predictor

# Fit the OLS model
model = sm.OLS(y, X).fit()

# Print the model summary
print(model.summary())

import yfinance as yf

# Define the ticker for Tesla
tesla_ticker = 'TSLA'

# Download Tesla's data
tesla = yf.Ticker(tesla_ticker)

# Fetching financial statements
income_statement = tesla.financials  # Income Statement
balance_sheet = tesla.balance_sheet  # Balance Sheet
cash_flow = tesla.cashflow  # Cash Flow Statement

# Display data for the years 2020 to 2023
print("Income Statement (2020-2023):")
print(income_statement.loc[:, :"2023"])

print("\nBalance Sheet (2020-2023):")
print(balance_sheet.loc[:, :"2023"])

print("\nCash Flow Statement (2020-2023):")
print(cash_flow.loc[:, :"2023"])

import pandas as pd
import numpy as np
import statsmodels.api as sm
import yfinance as yf

# Provided data
eps_data = [-0.04, 0.14, 0.18, 0.21, 0.33, 0.64, 1.03, 1.63, 2.45, 2.76, 3.23, 3.62, 3.4, 3.53, 3.11]
revenue_growth_data = [26, 25.7, 28.176, 31.54, 35.94, 41.86, 46.85, 53.82, 62.19, 67.17, 74.86, 81.46, 86.035, 94.03, 95.9]
production_volume_data = [509737, 930422, 1369611, 440808, 479700, 430488]  # Annual data for 2020, 2021, 2022 and Quarterly data for 2023
debt_to_equity_ratio_data = [1.07, 0.98, 0.63, 0.42, 0.38, 0.31, 0.23, 0.17, 0.09, 0.08, 0.05, 0.04, 0.03, 0.02, 0.05]
rd_spending_data = [1.33, 1.28, 1.31, 1.49, 1.83, 2.13, 2.37, 2.59, 2.79, 2.88, 3.0, 3.07, 2.98, 3.25, 3.68]

# Dates for quarterly data from 2020 to 2023
dates = pd.date_range(start='2020-01-01', periods=15, freq='Q')

# Creating a DataFrame
financial_data = pd.DataFrame({
    'EPS': eps_data,
    'Revenue_Growth': revenue_growth_data,
    'Debt_to_Equity_Ratio': debt_to_equity_ratio_data,
    'RD_Spending': rd_spending_data
}, index=dates)

# Simulating Production Volume data to fit quarterly
# As the production volume data is not for each quarter, we'll distribute the annual data across quarters
production_volume = pd.Series(production_volume_data, index=pd.to_datetime(['2020', '2021', '2022', '2023-03', '2023-06', '2023-09']))
production_volume = production_volume.resample('Q').ffill().reindex(dates)

# Adding production volume to the financial data DataFrame
financial_data['Production_Volume'] = production_volume

# Fetch Tesla's stock price data
tesla_stock_data = yf.download('TSLA', start='2020-01-01', end='2023-12-31')['Close']
tesla_stock_data = tesla_stock_data.resample('Q').last()  # Resample to quarterly data

# Combine the financial indicators with the stock price data
combined_data = pd.concat([tesla_stock_data, financial_data], axis=1).dropna()
combined_data.rename(columns={'Close': 'Tesla_Stock_Price'}, inplace=True)

# Regression analysis
y = combined_data['Tesla_Stock_Price']
X = combined_data.drop('Tesla_Stock_Price', axis=1)
X = sm.add_constant(X)  # Adds a constant term to the predictor

model = sm.OLS(y, X).fit()

# Display the model summary
model.summary()

import pandas as pd
import numpy as np
import statsmodels.api as sm
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Provided data
eps_data = [-0.04, 0.14, 0.18, 0.21, 0.33, 0.64, 1.03, 1.63, 2.45, 2.76, 3.23, 3.62, 3.4, 3.53, 3.11]
revenue_growth_data = [26, 25.7, 28.176, 31.54, 35.94, 41.86, 46.85, 53.82, 62.19, 67.17, 74.86, 81.46, 86.035, 94.03, 95.9]
production_volume_data = [509737, 930422, 1369611, 440808, 479700, 430488]  # Annual data for 2020, 2021, 2022 and Quarterly data for 2023
debt_to_equity_ratio_data = [1.07, 0.98, 0.63, 0.42, 0.38, 0.31, 0.23, 0.17, 0.09, 0.08, 0.05, 0.04, 0.03, 0.02, 0.05]
rd_spending_data = [1.33, 1.28, 1.31, 1.49, 1.83, 2.13, 2.37, 2.59, 2.79, 2.88, 3.0, 3.07, 2.98, 3.25, 3.68]

# Dates for quarterly data from 2020 to 2023
dates = pd.date_range(start='2020-01-01', periods=15, freq='Q')

# Creating a DataFrame
financial_data = pd.DataFrame({
    'EPS': eps_data,
    'Revenue_Growth': revenue_growth_data,
    'Debt_to_Equity_Ratio': debt_to_equity_ratio_data,
    'RD_Spending': rd_spending_data
}, index=dates)

# Simulating Production Volume data to fit quarterly
# As the production volume data is not for each quarter, we'll distribute the annual data across quarters
production_volume = pd.Series(production_volume_data, index=pd.to_datetime(['2020', '2021', '2022', '2023-03', '2023-06', '2023-09']))
production_volume = production_volume.resample('Q').ffill().reindex(dates)

# Adding production volume to the financial data DataFrame
financial_data['Production_Volume'] = production_volume

# Fetch Tesla's stock price data
tesla_stock_data = yf.download('TSLA', start='2020-01-01', end='2023-12-31')['Close']
tesla_stock_data = tesla_stock_data.resample('Q').last()  # Resample to quarterly data
# Create DataFrame for financial indicators (assuming you have these data in variables)
financial_data = pd.DataFrame({
    'Revenue_Growth': revenue_growth_data,
    'Debt_to_Equity_Ratio': debt_to_equity_ratio_data,
    'RD_Spending': rd_spending_data,
    'EPS': eps_data
}, index=dates)

# Combine all data
combined_data = pd.concat([stock_data, financial_data], axis=1).dropna()

# Regression analysis
y = combined_data['Tesla_Stock_Price']
X = combined_data.drop('Tesla_Stock_Price', axis=1)
X = sm.add_constant(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Fit the model
model = sm.OLS(y_train, X_train).fit()
print(model.summary())

# Predict on testing set
y_pred = model.predict(X_test)

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

# Plotting the results
plt.figure(figsize=(10, 6))
plt.plot(y_test.index, y_test, label='Actual Price')
plt.plot(y_test.index, y_pred, label='Predicted Price', color='red')
plt.title('Tesla Stock Price Prediction\nRMSE: {:.4f}'.format(rmse))
plt.legend()
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

import pandas as pd
import numpy as np
import statsmodels.api as sm
import yfinance as yf
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Hardcoded financial data
eps_data = [-0.04, 0.14, 0.18, 0.21, 0.33, 0.64, 1.03, 1.63, 2.45, 2.76, 3.23, 3.62, 3.4, 3.53, 3.11]
revenue_growth_data = [26, 25.7, 28.176, 31.54, 35.94, 41.86, 46.85, 53.82, 62.19, 67.17, 74.86, 81.46, 86.035, 94.03, 95.9]
debt_to_equity_ratio_data = [1.07, 0.98, 0.63, 0.42, 0.38, 0.31, 0.23, 0.17, 0.09, 0.08, 0.05, 0.04, 0.03, 0.02, 0.05]
rd_spending_data = [1.33, 1.28, 1.31, 1.49, 1.83, 2.13, 2.37, 2.59, 2.79, 2.88, 3.0, 3.07, 2.98, 3.25, 3.68]
inflation_rate_data = [2.5, 2.3, 1.5, 0.3, 0.1, 0.6, 1.0, 1.3, 1.4, 1.2, 1.2, 1.4, 1.4, 1.7, 2.6, 4.2, 5, 5.4, 5.4, 5.3, 5.4, 6.2, 6.8, 7, 7.5, 7.9, 8.5, 8.3, 8.6, 9.1, 8.5, 8.3, 8.2, 7.7, 7.1, 6.5, 6.4, 6, 5, 4.9, 4, 3, 3.2, 3.7, 3.7, 3.2, 3.1]
interest_rate_data = [1.55, 1.58, 0.65, 0.05, 0.05, 0.08, 0.09, 0.10, 0.09, 0.09, 0.09, 0.09, 0.09, 0.08, 0.07, 0.07, 0.06, 0.08, 0.10, 0.09, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.20, 0.33, 0.77, 1.21, 1.68, 2.33, 2.56, 3.08, 3.78, 4.10, 4.33, 4.57, 4.65, 4.83, 5.06, 5.08, 5.12, 5.33, 5.33, 5.33, 5.33]

# Download market indices data from Yahoo Finance
start_date = '2020-01-01'
end_date = '2023-01-01'
tesla_data = yf.download('TSLA', start=start_date, end=end_date)['Close'].rename('Tesla_Stock_Price')
sp500_data = yf.download('^GSPC', start=start_date, end=end_date)['Close'].rename('SP500_Index')
nasdaq_data = yf.download('^IXIC', start=start_date, end=end_date)['Close'].rename('NASDAQ_Index')
dowjones_data = yf.download('^DJI', start=start_date, end=end_date)['Close'].rename('DowJones_Index')

# Creating Date Ranges
quarter_dates = pd.date_range(start='2020-01-01', periods=15, freq='Q')
monthly_dates = pd.date_range(start='2020-01-01', periods=len(inflation_rate_data), freq='M')

# Creating DataFrames for Financial Indicators
financial_data = pd.DataFrame({
    'EPS': eps_data,
    'Revenue_Growth': revenue_growth_data,
    'Debt_to_Equity_Ratio': debt_to_equity_ratio_data,
    'RD_Spending': rd_spending_data
}, index=quarter_dates)

inflation_rate_df = pd.DataFrame(data=inflation_rate_data, index=monthly_dates, columns=["Inflation Rate"])
interest_rate_df = pd.DataFrame(data=interest_rate_data, index=monthly_dates, columns=["Interest Rate"])

# Resampling Quarterly Data to match Monthly Frequency
financial_data = financial_data.resample('M').pad()

# Combining market indices and financial data
market_data = pd.concat([sp500_data, nasdaq_data, dowjones_data], axis=1)
combined_financial_data = pd.concat([financial_data, inflation_rate_df, interest_rate_df], axis=1)

# Combine market and financial data with Tesla's Stock Price
full_data = pd.concat([tesla_data, market_data, combined_financial_data], axis=1).dropna()

# Regression Analysis
y = full_data['Tesla_Stock_Price']
X = full_data.drop('Tesla_Stock_Price', axis=1)
X = sm.add_constant(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Fit the model
model = sm.OLS(y_train, X_train).fit()

# Predict on the testing set
y_pred = model.predict(X_test)

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

X = full_data.drop('Tesla_Stock_Price', axis=1)
X = sm.add_constant(X)
y = full_data['Tesla_Stock_Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Fit the model
model = sm.OLS(y_train, X_train).fit()

test_dates = pd.date_range(start='2023-06-01', end='2023-09-30', freq='D')

# Simulating actual and predicted stock prices
np.random.seed(0)  # For reproducibility
y_test_simulated = pd.Series(np.random.rand(len(test_dates)) * 1000, index=test_dates)
y_pred_simulated = y_test_simulated * (1 + np.random.normal(0, 0.05, len(test_dates)))  # Adding some random noise

# Plotting the simulated data
plt.figure(figsize=(10, 6))
plt.scatter(y_test_simulated.index, y_test_simulated, label='Actual Price', color='blue', marker='o')
plt.scatter(y_pred_simulated.index, y_pred_simulated, label='Predicted Price', color='red', marker='o')
plt.title('Simulated Tesla Stock Price Prediction (June-September 2023)')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()



# Displaying the dynamic regression formula
model_params = model.params
formula = "Y_t = "
for i, param in enumerate(model_params):
    if i == 0:
        formula += f"{param:.4f} "
    else:
        formula += f"+ {param:.4f} * X_{i} "

# Adding the error term
formula += "+ \epsilon_t"
print(formula)

import pandas as pd
import numpy as np
import statsmodels.api as sm
import yfinance as yf
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Hardcoded financial data
eps_data = [-0.04, 0.14, 0.18, 0.21, 0.33, 0.64, 1.03, 1.63, 2.45, 2.76, 3.23, 3.62, 3.4, 3.53, 3.11]
revenue_growth_data = [26, 25.7, 28.176, 31.54, 35.94, 41.86, 46.85, 53.82, 62.19, 67.17, 74.86, 81.46, 86.035, 94.03, 95.9]
debt_to_equity_ratio_data = [1.07, 0.98, 0.63, 0.42, 0.38, 0.31, 0.23, 0.17, 0.09, 0.08, 0.05, 0.04, 0.03, 0.02, 0.05]
rd_spending_data = [1.33, 1.28, 1.31, 1.49, 1.83, 2.13, 2.37, 2.59, 2.79, 2.88, 3.0, 3.07, 2.98, 3.25, 3.68]

# Inflation and Interest Rate Data
inflation_rate_data = [2.5, 2.3, 1.5, 0.3, 0.1, 0.6, 1.0, 1.3, 1.4, 1.2, 1.2, 1.4, 1.4, 1.7, 2.6, 4.2, 5, 5.4, 5.4, 5.3, 5.4, 6.2, 6.8, 7, 7.5, 7.9, 8.5, 8.3, 8.6, 9.1, 8.5, 8.3, 8.2, 7.7, 7.1, 6.5, 6.4, 6, 5, 4.9, 4, 3, 3.2, 3.7, 3.7, 3.2, 3.1]
interest_rate_data = [1.55, 1.58, 0.65, 0.05, 0.05, 0.08, 0.09, 0.10, 0.09, 0.09, 0.09, 0.09, 0.09, 0.08, 0.07, 0.07, 0.06, 0.08, 0.10, 0.09, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.20, 0.33, 0.77, 1.21, 1.68, 2.33, 2.56, 3.08, 3.78, 4.10, 4.33, 4.57, 4.65, 4.83, 5.06, 5.08, 5.12, 5.33, 5.33, 5.33, 5.33]

# Download market indices data from Yahoo Finance
start_date = '2020-01-01'
end_date = '2023-01-01'
tesla_data = yf.download('TSLA', start=start_date, end=end_date)['Close'].rename('Tesla_Stock_Price')
sp500_data = yf.download('^GSPC', start=start_date, end=end_date)['Close'].rename('SP500_Index')
nasdaq_data = yf.download('^IXIC', start=start_date, end=end_date)['Close'].rename('NASDAQ_Index')
dowjones_data = yf.download('^DJI', start=start_date, end=end_date)['Close'].rename('DowJones_Index')

# Creating Date Ranges
quarter_dates = pd.date_range(start='2020-01-01', periods=15, freq='Q')
monthly_dates = pd.date_range(start='2020-01-01', periods=len(inflation_rate_data), freq='M')

# Creating DataFrames for Financial Indicators
financial_data = pd.DataFrame({
    'EPS': eps_data,
    'Revenue_Growth': revenue_growth_data,
    'Debt_to_Equity_Ratio': debt_to_equity_ratio_data,
    'RD_Spending': rd_spending_data
}, index=quarter_dates)

inflation_rate_df = pd.DataFrame(data=inflation_rate_data, index=monthly_dates, columns=["Inflation Rate"])
interest_rate_df = pd.DataFrame(data=interest_rate_data, index=monthly_dates, columns=["Interest Rate"])

# Resampling Quarterly Data to match Monthly Frequency
financial_data = financial_data.resample('M').pad()

# Combining market indices and financial data
market_data = pd.concat([sp500_data, nasdaq_data, dowjones_data], axis=1)
combined_financial_data = pd.concat([financial_data, inflation_rate_df, interest_rate_df], axis=1)

# Combine market and financial data with Tesla's Stock Price
full_data = pd.concat([tesla_data, market_data, combined_financial_data], axis=1).dropna()

# Regression Analysis
y = full_data['Tesla_Stock_Price']
X = full_data.drop('Tesla_Stock_Price', axis=1)
X = sm.add_constant(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Fit the model
model = sm.OLS(y_train, X_train).fit()

# Predict on the testing set
y_pred = model.predict(X_test)

# Plotting the actual vs predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test.index, y_test, label='Actual Price', color='blue', marker='o')
plt.scatter(y_test.index, y_pred, label='Predicted Price', color='red', marker='o')
plt.title('Tesla Stock Price Prediction (Actual vs Predicted)')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()